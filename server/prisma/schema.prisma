generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model YouthMovement {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  city        String
  postalCode  String
  street      String
  houseNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  groups  Group[]
  users   YouthMovementUser[]
  invites Invitation[]

  adminId Int
  admin   User @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model User {
  id               Int                 @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String              @unique
  cognitoId        String              @unique
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  imageUrl         String?
  youthMovements   YouthMovementUser[]
  posts            Post[]
  postLikes        PostLike[]
  messagesSent     Message[]           @relation("Sender")
  messagesReceived Message[]           @relation("Receiver")
  attendees        Attendee[]
  volunteers       Volunteer[]
  leadersGroups    LeadersGroup[]
  parentChild      ParentChild[]
  adminOf          YouthMovement[]
}

model YouthMovementUser {
  id              Int  @id @default(autoincrement())
  userId          Int
  youthMovementId Int
  role            Role

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  youthMovement YouthMovement @relation(fields: [youthMovementId], references: [id], onDelete: Cascade)

  @@unique([userId, youthMovementId]) // Ensures a user can't have multiple roles in the same movement
}

model Invitation {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  role            Role
  youthMovementId Int
  code            String    @unique
  used            Boolean   @default(false)
  sentAt          DateTime  @default(now())
  expiresAt       DateTime?

  youthMovement YouthMovement @relation(fields: [youthMovementId], references: [id], onDelete: Cascade)
}

model Group {
  id              Int    @id @default(autoincrement())
  name            String
  minimumAge      Int
  maximumAge      Int
  youthMovementId Int

  youthMovement YouthMovement  @relation(fields: [youthMovementId], references: [id], onDelete: Cascade)
  posts         Post[]
  events        Event[]
  leadersGroups LeadersGroup[]
  parentChild   ParentChild[]
}

model Post {
  id               Int      @id @default(autoincrement())
  title            String
  body             String
  userId           Int
  groupId          Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  image            String?
  amountOfComments Int      @default(0)

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group?     @relation(fields: [groupId], references: [id], onDelete: SetNull)
  likes PostLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id        Int      @id @default(autoincrement())
  name      String
  body      String
  image     String?
  type      String
  eventDate DateTime
  location  String?
  signUp    Boolean  @default(false)
  volunteer Boolean  @default(false)
  groupId   Int?

  group      Group?      @relation(fields: [groupId], references: [id], onDelete: SetNull)
  attendees  Attendee[]
  volunteers Volunteer[]
}

model Attendee {
  id      Int @id @default(autoincrement())
  eventId Int
  userId  Int

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Volunteer {
  id      Int @id @default(autoincrement())
  eventId Int
  userId  Int

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeadersGroup {
  id      Int @id @default(autoincrement())
  userId  Int
  groupId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ParentChild {
  id        Int            @id @default(autoincrement())
  parentId  Int
  childName String
  groupId   Int
  relation  ParentRelation

  parent User  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Message {
  id         Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  message    String
  sentAt     DateTime  @default(now())
  readAt     DateTime?

  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum Role {
  ouder
  leider
  admin
}

enum ParentRelation {
  moeder
  vader
  voogd
  stiefouder
}
